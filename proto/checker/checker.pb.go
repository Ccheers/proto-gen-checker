// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: checker.proto

package checker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rule:
	//
	//	*CheckRule_U32
	//	*CheckRule_U64
	//	*CheckRule_I32
	//	*CheckRule_I64
	//	*CheckRule_Float
	//	*CheckRule_Double
	//	*CheckRule_String_
	//	*CheckRule_Bytes
	//	*CheckRule_Repeated
	//	*CheckRule_Any
	//	*CheckRule_Enum
	//	*CheckRule_Map
	Rule     isCheckRule_Rule `protobuf_oneof:"rule"`
	ErrorMsg string           `protobuf:"bytes,101,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *CheckRule) Reset() {
	*x = CheckRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRule) ProtoMessage() {}

func (x *CheckRule) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRule.ProtoReflect.Descriptor instead.
func (*CheckRule) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{0}
}

func (m *CheckRule) GetRule() isCheckRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *CheckRule) GetU32() *UInt32 {
	if x, ok := x.GetRule().(*CheckRule_U32); ok {
		return x.U32
	}
	return nil
}

func (x *CheckRule) GetU64() *UInt64 {
	if x, ok := x.GetRule().(*CheckRule_U64); ok {
		return x.U64
	}
	return nil
}

func (x *CheckRule) GetI32() *Int32 {
	if x, ok := x.GetRule().(*CheckRule_I32); ok {
		return x.I32
	}
	return nil
}

func (x *CheckRule) GetI64() *Int64 {
	if x, ok := x.GetRule().(*CheckRule_I64); ok {
		return x.I64
	}
	return nil
}

func (x *CheckRule) GetFloat() *Float {
	if x, ok := x.GetRule().(*CheckRule_Float); ok {
		return x.Float
	}
	return nil
}

func (x *CheckRule) GetDouble() *Double {
	if x, ok := x.GetRule().(*CheckRule_Double); ok {
		return x.Double
	}
	return nil
}

func (x *CheckRule) GetString_() *String {
	if x, ok := x.GetRule().(*CheckRule_String_); ok {
		return x.String_
	}
	return nil
}

func (x *CheckRule) GetBytes() *Bytes {
	if x, ok := x.GetRule().(*CheckRule_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *CheckRule) GetRepeated() *Repeated {
	if x, ok := x.GetRule().(*CheckRule_Repeated); ok {
		return x.Repeated
	}
	return nil
}

func (x *CheckRule) GetAny() *Any {
	if x, ok := x.GetRule().(*CheckRule_Any); ok {
		return x.Any
	}
	return nil
}

func (x *CheckRule) GetEnum() *Enum {
	if x, ok := x.GetRule().(*CheckRule_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *CheckRule) GetMap() *Map {
	if x, ok := x.GetRule().(*CheckRule_Map); ok {
		return x.Map
	}
	return nil
}

func (x *CheckRule) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type isCheckRule_Rule interface {
	isCheckRule_Rule()
}

type CheckRule_U32 struct {
	U32 *UInt32 `protobuf:"bytes,1,opt,name=u32,proto3,oneof"`
}

type CheckRule_U64 struct {
	U64 *UInt64 `protobuf:"bytes,2,opt,name=u64,proto3,oneof"`
}

type CheckRule_I32 struct {
	I32 *Int32 `protobuf:"bytes,3,opt,name=i32,proto3,oneof"`
}

type CheckRule_I64 struct {
	I64 *Int64 `protobuf:"bytes,4,opt,name=i64,proto3,oneof"`
}

type CheckRule_Float struct {
	Float *Float `protobuf:"bytes,5,opt,name=float,proto3,oneof"` // float32 in go
}

type CheckRule_Double struct {
	Double *Double `protobuf:"bytes,6,opt,name=double,proto3,oneof"` // float 64 in go
}

type CheckRule_String_ struct {
	String_ *String `protobuf:"bytes,8,opt,name=string,proto3,oneof"`
}

type CheckRule_Bytes struct {
	Bytes *Bytes `protobuf:"bytes,9,opt,name=bytes,proto3,oneof"`
}

type CheckRule_Repeated struct {
	Repeated *Repeated `protobuf:"bytes,10,opt,name=repeated,proto3,oneof"`
}

type CheckRule_Any struct {
	Any *Any `protobuf:"bytes,11,opt,name=any,proto3,oneof"`
}

type CheckRule_Enum struct {
	Enum *Enum `protobuf:"bytes,12,opt,name=enum,proto3,oneof"`
}

type CheckRule_Map struct {
	Map *Map `protobuf:"bytes,13,opt,name=map,proto3,oneof"`
}

func (*CheckRule_U32) isCheckRule_Rule() {}

func (*CheckRule_U64) isCheckRule_Rule() {}

func (*CheckRule_I32) isCheckRule_Rule() {}

func (*CheckRule_I64) isCheckRule_Rule() {}

func (*CheckRule_Float) isCheckRule_Rule() {}

func (*CheckRule_Double) isCheckRule_Rule() {}

func (*CheckRule_String_) isCheckRule_Rule() {}

func (*CheckRule_Bytes) isCheckRule_Rule() {}

func (*CheckRule_Repeated) isCheckRule_Rule() {}

func (*CheckRule_Any) isCheckRule_Rule() {}

func (*CheckRule_Enum) isCheckRule_Rule() {}

func (*CheckRule_Map) isCheckRule_Rule() {}

type UInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *uint32 `protobuf:"varint,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *uint32 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Lte *uint32 `protobuf:"varint,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	Gte *uint32 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *UInt32) Reset() {
	*x = UInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32) ProtoMessage() {}

func (x *UInt32) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32.ProtoReflect.Descriptor instead.
func (*UInt32) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{1}
}

func (x *UInt32) GetLt() uint32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *UInt32) GetGt() uint32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *UInt32) GetLte() uint32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *UInt32) GetGte() uint32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

type UInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *uint64 `protobuf:"varint,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *uint64 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Lte *uint64 `protobuf:"varint,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	Gte *uint64 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *UInt64) Reset() {
	*x = UInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64) ProtoMessage() {}

func (x *UInt64) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64.ProtoReflect.Descriptor instead.
func (*UInt64) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{2}
}

func (x *UInt64) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *UInt64) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *UInt64) GetLte() uint64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *UInt64) GetGte() uint64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

type Int32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *int32 `protobuf:"varint,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *int32 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Lte *int32 `protobuf:"varint,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	Gte *int32 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *Int32) Reset() {
	*x = Int32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32) ProtoMessage() {}

func (x *Int32) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32.ProtoReflect.Descriptor instead.
func (*Int32) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{3}
}

func (x *Int32) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int32) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int32) GetLte() int32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Int32) GetGte() int32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

type Int64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *int64 `protobuf:"varint,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *int64 `protobuf:"varint,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Lte *int64 `protobuf:"varint,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	Gte *int64 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *Int64) Reset() {
	*x = Int64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64) ProtoMessage() {}

func (x *Int64) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64.ProtoReflect.Descriptor instead.
func (*Int64) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{4}
}

func (x *Int64) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int64) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int64) GetLte() int64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Int64) GetGte() int64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

type Double struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *float64 `protobuf:"fixed64,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *float64 `protobuf:"fixed64,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Lte *float64 `protobuf:"fixed64,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	Gte *float64 `protobuf:"fixed64,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *Double) Reset() {
	*x = Double{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Double) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Double) ProtoMessage() {}

func (x *Double) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Double.ProtoReflect.Descriptor instead.
func (*Double) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{5}
}

func (x *Double) GetLt() float64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Double) GetGt() float64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Double) GetLte() float64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Double) GetGte() float64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

type Float struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lt  *float32 `protobuf:"fixed32,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt  *float32 `protobuf:"fixed32,2,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Lte *float32 `protobuf:"fixed32,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	Gte *float32 `protobuf:"fixed32,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *Float) Reset() {
	*x = Float{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Float) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float) ProtoMessage() {}

func (x *Float) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float.ProtoReflect.Descriptor instead.
func (*Float) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{6}
}

func (x *Float) GetLt() float32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Float) GetGt() float32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Float) GetLte() float32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Float) GetGte() float32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 最小长度按 UTF8字符 来计算
	MinLen *uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3,oneof" json:"min_len,omitempty"`
	// 最大长度按 UTF8字符 来计算
	MaxLen *uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3,oneof" json:"max_len,omitempty"`
	// 最小长度按 字节数 计算
	MinBytes *uint64 `protobuf:"varint,4,opt,name=min_bytes,json=minBytes,proto3,oneof" json:"min_bytes,omitempty"`
	// 最大长度按 字节数 计算
	MaxBytes *uint64 `protobuf:"varint,5,opt,name=max_bytes,json=maxBytes,proto3,oneof" json:"max_bytes,omitempty"`
	// 正则通配符
	Pattern *string `protobuf:"bytes,6,opt,name=pattern,proto3,oneof" json:"pattern,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{7}
}

func (x *String) GetMinLen() uint64 {
	if x != nil && x.MinLen != nil {
		return *x.MinLen
	}
	return 0
}

func (x *String) GetMaxLen() uint64 {
	if x != nil && x.MaxLen != nil {
		return *x.MaxLen
	}
	return 0
}

func (x *String) GetMinBytes() uint64 {
	if x != nil && x.MinBytes != nil {
		return *x.MinBytes
	}
	return 0
}

func (x *String) GetMaxBytes() uint64 {
	if x != nil && x.MaxBytes != nil {
		return *x.MaxBytes
	}
	return 0
}

func (x *String) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

type Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 最小长度按 字节数 计算
	MinLen *uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3,oneof" json:"min_len,omitempty"`
	// 最大长度按 字节数 计算
	MaxLen *uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3,oneof" json:"max_len,omitempty"`
}

func (x *Bytes) Reset() {
	*x = Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytes) ProtoMessage() {}

func (x *Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytes.ProtoReflect.Descriptor instead.
func (*Bytes) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{8}
}

func (x *Bytes) GetMinLen() uint64 {
	if x != nil && x.MinLen != nil {
		return *x.MinLen
	}
	return 0
}

func (x *Bytes) GetMaxLen() uint64 {
	if x != nil && x.MaxLen != nil {
		return *x.MaxLen
	}
	return 0
}

type Repeated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否唯一
	Unique *bool `protobuf:"varint,1,opt,name=unique,proto3,oneof" json:"unique,omitempty"`
	// 最小长度
	MinLen *uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3,oneof" json:"min_len,omitempty"`
	// 最大长度
	MaxLen *uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3,oneof" json:"max_len,omitempty"`
	// 子项规则
	Items *CheckRule `protobuf:"bytes,4,opt,name=items,proto3,oneof" json:"items,omitempty"`
}

func (x *Repeated) Reset() {
	*x = Repeated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repeated) ProtoMessage() {}

func (x *Repeated) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repeated.ProtoReflect.Descriptor instead.
func (*Repeated) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{9}
}

func (x *Repeated) GetUnique() bool {
	if x != nil && x.Unique != nil {
		return *x.Unique
	}
	return false
}

func (x *Repeated) GetMinLen() uint64 {
	if x != nil && x.MinLen != nil {
		return *x.MinLen
	}
	return 0
}

func (x *Repeated) GetMaxLen() uint64 {
	if x != nil && x.MaxLen != nil {
		return *x.MaxLen
	}
	return 0
}

func (x *Repeated) GetItems() *CheckRule {
	if x != nil {
		return x.Items
	}
	return nil
}

type Any struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *Any) Reset() {
	*x = Any{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Any) ProtoMessage() {}

func (x *Any) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Any.ProtoReflect.Descriptor instead.
func (*Any) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{10}
}

func (x *Any) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type Enum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否必须是指定的 enum
	DefinedOnly *bool `protobuf:"varint,2,opt,name=defined_only,json=definedOnly,proto3,oneof" json:"defined_only,omitempty"`
}

func (x *Enum) Reset() {
	*x = Enum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enum) ProtoMessage() {}

func (x *Enum) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enum.ProtoReflect.Descriptor instead.
func (*Enum) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{11}
}

func (x *Enum) GetDefinedOnly() bool {
	if x != nil && x.DefinedOnly != nil {
		return *x.DefinedOnly
	}
	return false
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key 规则
	Keys *CheckRule `protobuf:"bytes,1,opt,name=keys,proto3,oneof" json:"keys,omitempty"`
	// value 规则
	Values *CheckRule `protobuf:"bytes,2,opt,name=values,proto3,oneof" json:"values,omitempty"`
	// 最小长度
	MinLen *uint64 `protobuf:"varint,3,opt,name=min_len,json=minLen,proto3,oneof" json:"min_len,omitempty"`
	// 最大长度
	MaxLen *uint64 `protobuf:"varint,4,opt,name=max_len,json=maxLen,proto3,oneof" json:"max_len,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_checker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_checker_proto_rawDescGZIP(), []int{12}
}

func (x *Map) GetKeys() *CheckRule {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Map) GetValues() *CheckRule {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Map) GetMinLen() uint64 {
	if x != nil && x.MinLen != nil {
		return *x.MinLen
	}
	return 0
}

func (x *Map) GetMaxLen() uint64 {
	if x != nil && x.MaxLen != nil {
		return *x.MaxLen
	}
	return 0
}

var file_checker_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*CheckRule)(nil),
		Field:         59935,
		Name:          "com.github.ccheers.proto.checker.rule",
		Tag:           "bytes,59935,opt,name=rule",
		Filename:      "checker.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional com.github.ccheers.proto.checker.CheckRule rule = 59935;
	E_Rule = &file_checker_proto_extTypes[0]
)

var File_checker_proto protoreflect.FileDescriptor

var file_checker_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xae, 0x06, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x3c, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12,
	0x3c, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x3b, 0x0a,
	0x03, 0x69, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x3b, 0x0a, 0x03, 0x69, 0x36,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x48, 0x00, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x3f, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x3f, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68,
	0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x61,
	0x6e, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x79, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x06, 0x0a, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x22, 0x7e, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x13,
	0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x03,
	0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x67, 0x74, 0x65, 0x22, 0x7e, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x13,
	0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x03,
	0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x67, 0x74, 0x65, 0x22, 0x7d, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x13, 0x0a,
	0x02, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x03, 0x67,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x67, 0x74, 0x65, 0x22, 0x7d, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x13, 0x0a, 0x02,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67,
	0x74, 0x65, 0x22, 0x7e, 0x0a, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x02,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67,
	0x74, 0x65, 0x22, 0x7d, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x02,
	0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x02, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74,
	0x65, 0x22, 0xe7, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x5b, 0x0a, 0x05, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x03, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x21, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x3f, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x26,
	0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xfd, 0x01, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12,
	0x44, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75,
	0x6c, 0x65, 0x48, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x3a, 0x63, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9f,
	0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x34, 0x5a, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x63, 0x68, 0x65, 0x65,
	0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_checker_proto_rawDescOnce sync.Once
	file_checker_proto_rawDescData = file_checker_proto_rawDesc
)

func file_checker_proto_rawDescGZIP() []byte {
	file_checker_proto_rawDescOnce.Do(func() {
		file_checker_proto_rawDescData = protoimpl.X.CompressGZIP(file_checker_proto_rawDescData)
	})
	return file_checker_proto_rawDescData
}

var file_checker_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_checker_proto_goTypes = []interface{}{
	(*CheckRule)(nil),                 // 0: com.github.ccheers.proto.checker.CheckRule
	(*UInt32)(nil),                    // 1: com.github.ccheers.proto.checker.UInt32
	(*UInt64)(nil),                    // 2: com.github.ccheers.proto.checker.UInt64
	(*Int32)(nil),                     // 3: com.github.ccheers.proto.checker.Int32
	(*Int64)(nil),                     // 4: com.github.ccheers.proto.checker.Int64
	(*Double)(nil),                    // 5: com.github.ccheers.proto.checker.Double
	(*Float)(nil),                     // 6: com.github.ccheers.proto.checker.Float
	(*String)(nil),                    // 7: com.github.ccheers.proto.checker.String
	(*Bytes)(nil),                     // 8: com.github.ccheers.proto.checker.Bytes
	(*Repeated)(nil),                  // 9: com.github.ccheers.proto.checker.Repeated
	(*Any)(nil),                       // 10: com.github.ccheers.proto.checker.Any
	(*Enum)(nil),                      // 11: com.github.ccheers.proto.checker.Enum
	(*Map)(nil),                       // 12: com.github.ccheers.proto.checker.Map
	(*descriptorpb.FieldOptions)(nil), // 13: google.protobuf.FieldOptions
}
var file_checker_proto_depIdxs = []int32{
	1,  // 0: com.github.ccheers.proto.checker.CheckRule.u32:type_name -> com.github.ccheers.proto.checker.UInt32
	2,  // 1: com.github.ccheers.proto.checker.CheckRule.u64:type_name -> com.github.ccheers.proto.checker.UInt64
	3,  // 2: com.github.ccheers.proto.checker.CheckRule.i32:type_name -> com.github.ccheers.proto.checker.Int32
	4,  // 3: com.github.ccheers.proto.checker.CheckRule.i64:type_name -> com.github.ccheers.proto.checker.Int64
	6,  // 4: com.github.ccheers.proto.checker.CheckRule.float:type_name -> com.github.ccheers.proto.checker.Float
	5,  // 5: com.github.ccheers.proto.checker.CheckRule.double:type_name -> com.github.ccheers.proto.checker.Double
	7,  // 6: com.github.ccheers.proto.checker.CheckRule.string:type_name -> com.github.ccheers.proto.checker.String
	8,  // 7: com.github.ccheers.proto.checker.CheckRule.bytes:type_name -> com.github.ccheers.proto.checker.Bytes
	9,  // 8: com.github.ccheers.proto.checker.CheckRule.repeated:type_name -> com.github.ccheers.proto.checker.Repeated
	10, // 9: com.github.ccheers.proto.checker.CheckRule.any:type_name -> com.github.ccheers.proto.checker.Any
	11, // 10: com.github.ccheers.proto.checker.CheckRule.enum:type_name -> com.github.ccheers.proto.checker.Enum
	12, // 11: com.github.ccheers.proto.checker.CheckRule.map:type_name -> com.github.ccheers.proto.checker.Map
	0,  // 12: com.github.ccheers.proto.checker.Repeated.items:type_name -> com.github.ccheers.proto.checker.CheckRule
	0,  // 13: com.github.ccheers.proto.checker.Map.keys:type_name -> com.github.ccheers.proto.checker.CheckRule
	0,  // 14: com.github.ccheers.proto.checker.Map.values:type_name -> com.github.ccheers.proto.checker.CheckRule
	13, // 15: com.github.ccheers.proto.checker.rule:extendee -> google.protobuf.FieldOptions
	0,  // 16: com.github.ccheers.proto.checker.rule:type_name -> com.github.ccheers.proto.checker.CheckRule
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	16, // [16:17] is the sub-list for extension type_name
	15, // [15:16] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_checker_proto_init() }
func file_checker_proto_init() {
	if File_checker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_checker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Double); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Float); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repeated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Any); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_checker_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CheckRule_U32)(nil),
		(*CheckRule_U64)(nil),
		(*CheckRule_I32)(nil),
		(*CheckRule_I64)(nil),
		(*CheckRule_Float)(nil),
		(*CheckRule_Double)(nil),
		(*CheckRule_String_)(nil),
		(*CheckRule_Bytes)(nil),
		(*CheckRule_Repeated)(nil),
		(*CheckRule_Any)(nil),
		(*CheckRule_Enum)(nil),
		(*CheckRule_Map)(nil),
	}
	file_checker_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_checker_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_checker_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_checker_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_checker_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_checker_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_checker_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_checker_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_checker_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_checker_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_checker_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_checker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_checker_proto_goTypes,
		DependencyIndexes: file_checker_proto_depIdxs,
		MessageInfos:      file_checker_proto_msgTypes,
		ExtensionInfos:    file_checker_proto_extTypes,
	}.Build()
	File_checker_proto = out.File
	file_checker_proto_rawDesc = nil
	file_checker_proto_goTypes = nil
	file_checker_proto_depIdxs = nil
}
